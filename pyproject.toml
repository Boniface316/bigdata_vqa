[tool.commitizen]
name = "cz_customize"
tag_format = "$version"
version_scheme = "semver"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true


[tool.commitizen.customize]
message_template = "{{change_type}}({{scope}}): {{message}} {% if is_breaking_change %} BREAKING CHANGE: {{footer}}{% endif %}"
example = "feature: this feature enable customize through config file"
schema = "<type>: <body>"
schema_pattern = "(feature|bug fix):(\\s.*)"
bump_pattern = "^(break|new|fix|hotfix)"
bump_map = {"break" = "MAJOR", "new" = "MINOR", "fix" = "PATCH", "hotfix" = "PATCH"}
change_type_order = ["BREAKING CHANGE", "feat", "fix", "refactor", "perf"]
info_path = "cz_customize_info.txt"
info = """
This is customized info
"""
commit_parser = "^(?P<change_type>feature|bug fix):\\s(?P<message>.*)?"
changelog_pattern = "^(feature|bug fix)?(!)?"
change_type_map = {"feature" = "Feat", "bug fix" = "Fix"}



[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
choices = [{value = "feat", name = "‚ú® feature: A new feature."}, 
        {value = "fix", name = "üî• fix: A bug fix."}, 
        {value = "WIP", name = "üöß  WIP: Work in progress."}, 
        {value = "backup", name = "üöë backup: backup."},
        {value = "style", name = "üé® style: Changes that do not affect the meaning of the code (formats)."},
        {value = "refactor", name = "‚ôªÔ∏è refactor: A code changes that niether fixes a bur nor adds a feature."},
        {value = "perf", name = "‚ö°Ô∏è perf: A code change that improves performance."},
        {value = "docs", name = "üìù docs: Documentation only changes."},
        {value = "test", name = "‚úÖ test: Adding missing or correcting existing tests."},
        {value = "build", name = "üîß build: Changes that affect the build system or external dependencies (i.e pip, docker, .toml)."},
        {value = "ci", name = "üíö ci: Changes to our CI configuration files and scripts."},
        {value = "exp", name = "üìà  experimentation: A code to recreate experimentation or experimentation results"},
        ]

message = "Select the type of change you are committing"

[[tool.commitizen.customize.questions]]
type = "input"
name = "scope"
message = "What is the scope of this change? (class or file name): (press [enter] to skip)\n"


[[tool.commitizen.customize.questions]]
type = "input"
name = "message"
message = "Write a short and imperative summary of the code changes: (lower case and no period)\n"

[[tool.commitizen.customize.questions]]
type = "confirm"
name = "is_breaking_change"
message = "Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer"

[[tool.commitizen.customize.questions]]
type = "input"
name = "footer"
message = "Footer. Information about Breaking Changes and \n reference issues that this commit closes: (press [enter] to skip)\n" 

[tool.mypy]
pretty = true
strict = true
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
plugins = ["pandera.mypy", "pydantic.mypy"]

[tool.pytest.ini_options]
addopts = "--verbosity=2"
pythonpath = ["src"]

[tool.ruff]
fix = true
indent-width = 4
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["F", "E", "W", "I001", "I"]

[tool.ruff.lint.isort]
order-by-type = true
section-order = ["future", "standard-library", "first-party", "local-folder", "third-party"]


[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D100", "D103"]


